extends ../layout.pug

block variables
	- var page_title = "Viewport - ";
	- var body_class = "ed-viewport";

block content
	.ed-container.viewport
		.ed-region-window
			.ed-region-tool-props
				.wgt-panel.enabled
					.wgt-panel-header.js-panel-collapse
						.wgt-panel-header-collapse
						.wgt-panel-header-name Datablock, Tools & Checkboxes

					.wgt-panel-content
						// ID Block
						.wgt-id-block
							.wgt-id-block-id_list
								img.icon(src="/assets/img/icons/icon_scene_data.png")
							.wgt-id-block-name
								span Datablock Picker
							.wgt-id-block-action
								img.icon(src="/assets/img/icons/icon_zoomin.png")
							.wgt-id-block-action
								img.icon(src="/assets/img/icons/icon_panel_close.png")


			.ed-region-window-content
				#window-content
				#viewport

			.ed-region-tools
				.wgt-panel.enabled
					.wgt-panel-header.js-panel-collapse
						.wgt-panel-header-collapse
						.wgt-panel-header-name Active View Layer

					.wgt-panel-content
						.wgt-id-block
							.wgt-id-block-id_list
								img.icon(src="/assets/img/icons/icon_renderlayer.png")
							.wgt-id-block-name
								span View Layer

						.wgt-list-container
							.wgt-list-toolbar
								ul.wgt-tool-group

									li.wgt-tool.js-add-template(
										data-template="list-collection",
										title="Add Collection")
										.wgt-tool-icon
											img.icon(src="/assets/img/icons/icon_collections.png")

									li.wgt-tool.js-add-template(
										data-template="list-override",
										title="Add Override")
										.wgt-tool-icon
											img.icon(src="/assets/img/icons/icon_rna.png")

								ul.wgt-tool-group
									li.wgt-tool.js-list-item-remove(
										title="Remove item")
										.wgt-tool-icon
											img.icon(src="/assets/img/icons/icon_zoomout.png")

							.wgt-list-items
								ul
									li
										.wgt-list-item.collection.has-children.has-override
											img.icon.js-list-item-collapse(
												src="/assets/img/icons/icon_tria_down.png")
											img.icon(
												src="/assets/img/icons/icon_collections.png")
											span.name Master Collection

											ul
												li
													img.icon.js-icon-toggle-onoff(
														title="Toggle visibility of the objects in this collection",
														src="/assets/img/icons/icon_restrict_view_off.png")
												li
													img.icon.js-icon-toggle-onoff(
														title="Toggle selectability of the objects in this collection",
														src="/assets/img/icons/icon_restrict_select_off.png")
												li
													.wgt-checkbox.js-bool.enabled(
														title="Enable or disable this collection")
														.wgt-checkbox-zone

										ul
											li
												.wgt-list-item.override
													img.icon(
														src="/assets/img/icons/icon_rna.png")
													span.name Collection Override
													ul
														li
															.wgt-checkbox.js-bool.enabled(
																title="Enable or disable this override")
																.wgt-checkbox-zone

						.wgt-list-resize


				.wgt-panel
					.wgt-panel-header.js-panel-collapse
						.wgt-panel-header-collapse
						.wgt-panel-header-name Collection


				.wgt-panel
					.wgt-panel-header.js-panel-collapse
						.wgt-panel-header-collapse
						.wgt-panel-header-name Overrides


		.ed-region-header
			.wgt-dropdown.icon-only
				.wgt-dropdown-container
					.wgt-dropdown-icon
						img.icon(src="/assets/img/icons/icon_view_3d.png")
					.wgt-dropdown-arrows

			ul.wgt-menu-simple
				li.wgt-menu-simple-item.js-add-menu-template(
					data-template="dropdown-file")
					| View

				li.wgt-menu-simple-item.js-add-menu-template(
					data-template="dropdown-file")
					| Select

				li.wgt-menu-simple-item.js-add-menu-template(
					data-template="dropdown-file")
					| Add

				li.wgt-menu-simple-item.js-add-menu-template(
					data-template="dropdown-file")
					| Object

			.wgt-dropdown
				.wgt-dropdown-container
					.wgt-dropdown-icon
						img.icon(src="/assets/img/icons/icon_scene_data.png")
					.wgt-dropdown-name Object Mode
					.wgt-dropdown-arrows


block scripts
	script(src="/assets/js/three.min.js")
	script(src="/assets/js/three_OrbitControls.js")
	script(src="/assets/js/three_Detector.js")
	script.
		if (!Detector.webgl) Detector.addGetWebGLMessage();
		var camera, scene, renderer;

		var $window_content = $('#window-content');
		var $tools = $('.ed-region-tools');
		var $tool_props = $('.ed-region-tool-props');
		var offLeft = $tools.width();
		var winWidth = window.innerWidth - $tools.width() - $tool_props.width();
		var winHeight = $window_content.height();

		init();

		function init() {
			var container = document.getElementById('viewport');
			document.body.appendChild(container);

			scene = new THREE.Scene();
			scene.background = new THREE.Color( 0x666666);

			var grid = new THREE.GridHelper(200, 50);
			scene.add(grid);

			var axisHelper = new THREE.AxisHelper(128);
			scene.add(axisHelper);

			camera = new THREE.PerspectiveCamera(30, winWidth / winHeight);
			camera.position.set(45, 15, 45);
			camera.lookAt(axisHelper.position);

			var material = new THREE.MeshPhongMaterial( { ambient: 0x999999, color: 0xdddddd} );

			function initMesh() {
				cube = new THREE.Mesh(new THREE.CubeGeometry(4, 4, 4), material);
				scene.add(cube);
			}

			var light = new THREE.DirectionalLight(0xfffeee);
			light.position.set( 0, 0.5, 1 ).normalize();
			scene.add(light);

			var light2 = new THREE.DirectionalLight(0xeeeeff);
			light2.position.set(1, 1, 0).normalize();
			scene.add(light2);

			renderer = new THREE.WebGLRenderer();
			renderer.setPixelRatio( window.devicePixelRatio );
			container.appendChild( renderer.domElement );

			var controls = new THREE.OrbitControls(camera, renderer.domElement);
			controls.update();

			window.addEventListener('resize', onWindowResize, false);
			animate();

			scene.fog = new THREE.FogExp2( 0x666666, 0.0128 );
			renderer.setClearColor(scene.fog.color, 1);

			initMesh();
		}

		function onWindowResize() {
			winWidth = window.innerWidth - $tools.width() - $tool_props.width();
			winHeight = $window_content.height();

			camera.aspect = winWidth / winHeight;
			camera.updateProjectionMatrix();
			viewportContentSize();
		}

		function animate() {
			requestAnimationFrame( animate );
			render();
		}

		function render() {
			renderer.render(scene, camera);
		}

		function viewportContentSize(){
			winWidth = window.innerWidth - $tools.width() - $tool_props.width();
			winHeight = $window_content.height();

			$('#viewport canvas, .ed-region-window-content').css({
				'top': $tools.offset().top,
				'left': offLeft,
				'width': winWidth,
				'min-width': winWidth,
				'max-width': winWidth,
				'height': winHeight,
				'min-height': winHeight,
				'max-height': winHeight
			});

			renderer.setSize(winWidth, winHeight);
		}

		viewportContentSize();

		Mousetrap.bind('t', function(event, combo) {
			$tool_props.toggle();
			onWindowResize();
		});

		Mousetrap.bind('n', function(event, combo) {
			$tools.toggle();
			onWindowResize();
		});
